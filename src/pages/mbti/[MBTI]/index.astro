---
import Layout from "../../../components/Layout.astro"
import ch from 'cheerio'
import rep from 'request-promise'

export const getStaticPaths =async()=>{

    
    
    const getContent =(html)=>{

    let allData = ch(".post-content", html).html()

    return allData

}


function htmlToJSON(htmlContent) {

  const $ = ch.load(htmlContent);
  const json = [];

  $('h1, h2, h3, h4, h5, h6, p, figure, img').each((index, element) => {
    const tagName = element.tagName.toLowerCase();
    let type = '';
    let context = '';

    switch (tagName) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        type = 'title';
        context = $(element).text().trim();
        break;

      case 'p':
        type = 'text';
        context = $(element).html().trim();
        break;

      case 'img':
        type = 'image';
        context = '';
        const imgDesc = $(element).attr('alt');
        const imgUrl = $(element).attr('src');
        json.push({ desc: imgDesc, link: imgUrl, type });
        break;

    
        case 'br':
          type = 'space';
          context = 2;
          break;
  
        default:
          break;
      }

    if (type !== '' && context !== '') {
      json.push({context , type });
    }
  });

  return json;
}

const getDetail =(html)=>{

  let allData = {
    title: null,
    url: null,
    tag: null,
    image: []
  }

  allData.tag = ch(ch(".article-cat", html)[0]).text()
  allData.title = ch("article > .text-legibility", html).text()
  allData.image[0] = ch(".wp-post-image", html).attr("src")
  allData.image[1] = ch(".wp-post-image", html).attr("alt")
  allData.url = allData.title.replace(/\s/g, "_").trim()
  return allData

}

const sendData =async(data)=>{

  const url = "https://stale-camera.pockethost.io/api/collections/fireBlogTopics/records"
  
  const response = await fetch(url, {
    method: "POST", 
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data)
  })

  console.log(response)

}

const CreateNow =(url)=>{

    rep(url)
    .then((html)=>{
        let data= {
            list: htmlToJSON(getContent(html)),
            detail: getDetail(html)
        }

        const lastData = {
          title: data.detail.title,
          description: data.detail.description? data.detail.description : "_",
          tags: data.detail.tag,
          views: 0,
          url: data.detail.url,
          image: {
            desc: data.detail.image[1],
            link: data.detail.image[0]
          },
          content: {list : data.list}
      }

      sendData(lastData)

    }).catch((err)=>{
        console.log(err.message)
    })

}

const getPaths =(url)=>{

  rep(url)
    .then((html)=>{
      let paths = ch(".list-of-days > li > span > a", html)
      for(let i = 0 ; i < paths.length ; i++){
        let target = ch(paths[i]).attr("href")
        CreateNow(target) 
      }
    })
    .catch((e)=> console.log(e.message))
}

getPaths("https://www.sciencealert.com/archive")
    
    
    
    
    
    let pages = {INFJ: {context : []},ENTP: {context : []},INTP: {context : []},INTJ: {context : []},ENTJ: {context : []},ENFJ: {context : []},INFP: {context : []},ENFP: {context : []},ISFP: {context : []},ISTP: {context : []},ISFJ: {context : []},ISTJ: {context : []},ESTP: {context : []},ESFP: {context : []},ESTJ: {context : []},ESFJ: {context : []}}


    const reqData = await fetch(import.meta.env.FETCH_DATA)
    const data = await reqData.json()
    const reqShow = await fetch(import.meta.env.FETCH_TYPE)
    const show = await reqShow.json()
    
    data.map((idea) => {
        pages[idea.type].context =[...pages[idea.type].context, idea.postes]

        show.map((val) => {
            val.groups.map((finalVal) => {
                if(finalVal.type === idea.type){
                    pages[idea.type] = {
                        context : pages[idea.type].context,
                        group: val.title,
                        params: idea.type, 
                        show : finalVal
                    }
                }
            })
        })

    })

    return Object.keys(pages).map((val) => {

        return {
            params: {MBTI: val},
            props: {data: pages[val]}
        }
    })

}

let {group, context, params, show} = Astro.props.data

---

<Layout title={`MBIT say : ${params}`} icon={params.toLowerCase()}>
    <div class="w-full h-max grid lg:grid-cols-2 grid-cols-1 my-10">
        <div class="h-60 col-span-1 flex items-center justify-center" >
            <img  src={`/types/${params.toLowerCase()}.svg`} class="h-full w-auto"/>
        </div>
        <div class="col-span-1 h-full">
            <h1 class="text-3xl font-semibold border-l-4 border-red-600 pl-2 text-red-600">{show.name}</h1>
            <p class="my-2 text-xl space-x-2 mb-7">{group}
                <span class="text-red-600 font-semibold">{params}</span>
            </p>
            <p class="text-lg font-light">{show.description}</p>
        </div>
    </div>
    <div class="h-max w-full  gap-2 grid xl:grid-cols-4 lg:grid-cols-2 grid-cols-1">
        {
            context.map((val, index) => {
                return(
                    <div class="p-3 col-span-1 flex-col border-4 rounded-xl border-red-600 bg-gray-900 h-60 flex justify-between items-center">
                        <p style="overflow-wrap: anywhere;" class="text-lg font-light w-full">{val.substr(0, 120)}{val.length > 150 && "..."}</p>
                        <a href={`/mbti/${params}/${index}`} class="btn bg-red-600 w-full text-white font-semibold">Read More</a>    
                    </div>
                )
            })
        }
    </div>
</Layout>
